{"version":3,"sources":["components/Navbar.js","components/Textarea.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","navOpt1","navOpt2","onClick","darkModeBtn","htmlFor","Textarea","useState","mText","setFtext","style","backgroundColor","color","placeholder","onChange","event","target","value","rows","newText","toLocaleUpperCase","showAlert","toLocaleLowerCase","split","length","Alert","alert","role","msg","defaultProps","App","setmode","setalert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.af7e293b.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">{props.navOpt1}</a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" href=\"/\">{props.navOpt2}</a>\r\n                        </li>\r\n                    </ul>\r\n                    <div className=\"form-check form-switch\">\r\n                        <input className=\"form-check-input\" type=\"checkbox\" onClick={props.darkModeBtn} id=\"flexSwitchCheckDefault\" />\r\n                        <label className={`form-check-label text-${props.mode=== \"light\"?\"dark\":\"light\"}`} htmlFor=\"flexSwitchCheckDefault\">{`Enable ${props.mode=== \"light\"?\"dark\":\"light\"} Mode`}</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    navOpt1: PropTypes.string,\r\n    navOpt2: PropTypes.string\r\n};\r\n\r\nNavbar.defaultProps = {\r\n    title: \"set title here\"\r\n}","import React, { useState } from \"react\";\r\n\r\nexport default function Textarea(props) {\r\n    const btnUp = () => {\r\n        let newText = mText.toLocaleUpperCase();\r\n        setFtext(newText);\r\n        props.showAlert(\"Success\", \"  Converted to Uppercase\");\r\n    };\r\n    const btndown = () => {\r\n        let newText = mText.toLocaleLowerCase();\r\n        setFtext(newText);\r\n        props.showAlert(\"Success\", \"  Converted to Lowercase\");\r\n    };\r\n    const btnonchenge = (event) => {\r\n        setFtext(event.target.value);\r\n    };\r\n    const clearText = () => {\r\n        setFtext(\"\");\r\n        props.showAlert(\"Success\", \"  All Text Removed\");\r\n    };\r\n\r\n    //{backgroundColor: props.mode===\"dark\"?\"grey\":\"white\",color: props.mode===\"dark\"?\"white\":\"black\"}\r\n\r\n    var [mText, setFtext] = useState(\"\");\r\n\r\n    return (\r\n        <>\r\n            <div className=\"mb-3\">\r\n                <h1>Enter Text Here</h1>\r\n                <textarea\r\n                    className=\"form-control\"\r\n                    id=\"textarea\"\r\n                    style={\r\n                        props.mode === \"dark\"\r\n                            ? { backgroundColor: \"gray\", color: \"white\" }\r\n                            : { backgroundColor: \"white\", color: \"black\" }\r\n                    }\r\n                    placeholder=\"Enter Text Here. . . .\"\r\n                    onChange={btnonchenge}\r\n                    value={mText} \r\n                    rows=\"9\"\r\n                ></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary m-2\" onClick={btnUp}>\r\n                Convert To Upercase\r\n            </button>\r\n            <button className=\"btn btn-primary m-2\" onClick={btndown}>\r\n                Convert To Lowercase\r\n            </button>\r\n            <button\r\n                className=\"btn btn-primary m-2\r\n            \"\r\n                onClick={clearText}\r\n            >\r\n                Clear Text\r\n            </button>\r\n            <div className=\"container\">\r\n                <h2>Your Text Summary:</h2>\r\n                <p>\r\n                    {mText.split(\" \").length} Words &amp; {mText.length} Characters\r\n                </p>\r\n                <p>{0.008 * mText.split(\" \").length} Munits to Read..</p>\r\n            </div>\r\n            <div className=\"container\">\r\n                <h3>Preview</h3>\r\n            </div>\r\n            <div className=\"container\">\r\n                <p>{mText}</p>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    return (\r\n\r\nprops.alert && <div className=\"alert alert-success alert-dismissible fade show\" role=\"alert\">\r\n  <strong>{`${props.alert.type}`}!</strong>{props.alert.msg}\r\n</div>\r\n\r\n    )\r\n}\r\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport Textarea from './components/Textarea';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n\nfunction App() {\n  const [mode, setmode] = useState(\"light\")\n  const darkModeBtn = () => {\n    if (mode === \"light\") {\n      setmode(\"dark\")\n      document.body.style.backgroundColor = \"#242743\"\n      document.body.style.color = \"white\"\n      showAlert(\"Success\", \"  Dark mode has been Enabled\")\n    } else {\n      setmode(\"light\")\n      document.body.style.backgroundColor = \"white\"\n      document.body.style.color = \"black\"\n      showAlert(\"Success\", \"  Light mode has been Enabled\")\n    }\n  }\n  const [alert, setalert] = useState(null)\n  const showAlert = (type, message) => {\n    setalert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setalert(null)\n    }, 1500);\n  }\n  return (\n    <>\n      <Navbar title=\"All About Text\" navOpt1=\"Home\" navOpt2=\"About\" mode={mode} darkModeBtn={darkModeBtn} />\n      <Alert alert={alert} />\n      <div className=\"container\">\n        <Textarea showAlert={showAlert} mode={mode} />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}